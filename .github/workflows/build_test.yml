# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
        build_type: [release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        sudo apt update && \
        sudo apt install \
          cmake \
          ninja-build \
          libavcodec-dev \
          libavformat-dev \
          libavutil-dev \
          libswresample-dev \
          libswscale-dev \
          ffmpeg && \
        mkdir dev && \
        cd dev && \
        git clone https://github.com/AcademySoftwareFoundation/OpenTimelineIO.git && \
        cd OpenTimelineIO && \
        git checkout cxx17 && \
        mkdir build && \
        cd build && \
        cmake .. && \
        sudo make install && \
        sudo apt install libgtest-dev libgmock-dev && \
        cd /usr/src/gtest && \
        sudo cmake CMakeLists.txt && \
        sudo make && \
        sudo cp lib/*.a /usr/lib && \
        cd /usr/src/googletest/googlemock/ && \
        sudo mkdir build && \
        sudo cmake .. && \
        sudo make && \
        sudo cp lib/*.a /usr/lib && \
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        ./ovi_build.sh ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{ github.workspace }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        sudo ldconfig && \
        ./ovi_unittest.sh
